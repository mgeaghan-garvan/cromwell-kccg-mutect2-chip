include required(classpath("application"))

backend {
    default = SGE

    providers {
        SGE {
            actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
            config {
                concurrent-job-limit = 100

                runtime-attributes = """
                Int cpu = 2
                Int? mem_mb
                String? sge_queue
                String? sge_project
                String? docker
                String docker_shell = "/bin/bash"
                Int? bootDiskSizeGb
                String? disks
                Int? preemptible
                Int? maxRetries
                String bind_cmd = ""
                String singularity_local = ""
                """

                submit = """
                qsub \
                -q short.q,long.q \
                -terse \
                -V \
                -b y \
                -N ${job_name} \
                -wd ${cwd} \
                -o ${out} \
                -e ${err} \
                -pe smp ${cpu} \
                ${"-l mem_free=" + mem_mb + "M" + " -l h_vmem=" + mem_mb + "M"} \
                ${"-q " + sge_queue} \
                ${"-P " + sge_project} \
                /usr/bin/env bash ${script}
                """

                submit-docker = """
                # Ensure SINGULARITY_CACHEDIR is set; else use a default based on user's home
                if [ -z $SINGULARITY_CACHEDIR ]
                    then CACHE_DIR=$HOME/.singularity/cache
                    else CACHE_DIR=$SINGULARITY_CACHEDIR
                fi
                # Ensure cache dir exists so lock file can be created
                mkdir -p $CACHE_DIR
                LOCK_FILE=$CACHE_DIR/singularity_pull_flock
                # Create an exclusive filelock
                flock --exclusive --timeout 900 $LOCK_FILE \
                    singularity exec --containall docker://${docker} \
                    echo "Successfully pulled ${docker}!"
                # Create wrapper script around docker command
                echo '#!/bin/bash' > ${cwd}/sge_docker_script.sh
                if [ "${singularity_local}" == "" ]; then DOCKER_CMD="${'docker://' + docker}"; else DOCKER_CMD="${singularity_local}"; fi
                echo singularity exec --containall --bind ${cwd}:${docker_cwd} ${bind_cmd} $DOCKER_CMD ${docker_shell} ${docker_script} >> ${cwd}/sge_docker_script.sh
                # Submit job
                qsub \
                -q short.q,long.q \
                -terse \
                -V \
                -b y \
                -N ${job_name} \
                -wd ${cwd} \
                -o ${out} \
                -e ${err} \
                -pe smp ${cpu} \
                ${"-l mem_free=" + mem_mb + "M" + " -l h_vmem=" + mem_mb + "M"} \
                ${"-q " + sge_queue} \
                ${"-P " + sge_project} \
                /usr/bin/env bash ${cwd}/sge_docker_script.sh
                """

                job-id-regex = "(\\d+)"

                kill = "qdel ${job_id}"
                check-alive = "qstat -j ${job_id}"
            }
        }
        singularity {
            actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
            config {
                run-in-background = true
                runtime-attributes = """
                String? docker
                String docker_shell = "/bin/bash"
                String bind_cmd = ""
                String singularity_local = ""
                """
                submit-docker = """
                if [ ${singularity_local} == "" ]; then DOCKER_CMD=${'docker://' + docker}; else DOCKER_CMD=${singularity_local}; fi
                singularity exec --containall --bind ${cwd}:${docker_cwd} ${bind_cmd} $DOCKER_CMD ${docker_shell} ${docker_script}
                """
            }
        }
    }
}

# Configure web service
webservice {
  port = CROMWELL_PORT_TO_SED
  interface = localhost
}


# Use a MySQL database
database {
  profile = "slick.jdbc.MySQLProfile$"
  #driver = "slick.driver.MySQLDriver$"
  db {
    url = "jdbc:mysql://DBHOST_TO_SED:DBPORT_TO_SED/DBNAME_TO_SED?useSSL=false&rewriteBatchedStatements=true&useLegacyDatetimeCode=false&serverTimezone=Australia/Sydney"
    user = "cromwell_user"
    password = "12345678!1aA"
    driver = "com.mysql.cj.jdbc.Driver"
    # needed a bigger timeout for big jc jobs, with 10k tasks
    connectionTimeout = 5000
  }
}
