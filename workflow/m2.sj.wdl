version 1.0

# =================================================================================== #
# m2.sj.wdl                                                                           #
#                                                                                     #
# This workflow has been adapted from the mutect2.wdl workflow developed by the Broad #
# Institue. The base version of the original workflow can be found here:              #
# https://github.com/broadinstitute/gatk/blob/4.1.6.0/scripts/mutect2_wdl/mutect2.wdl #
#                                                                                     #
# The CramToBam and Funcotator tasks have been removed and a few minor alterations    #
# have been made for integration into the larger CHIP workflow.                       #
#                                                                                     #
# This pipeline has been developed for use by the Kinghorn                            #
# Centre for Clinical Genomics and the Garvan Institute for                           # 
# Medical Research.                                                                   #
#                                                                                     #
# Author: Michael Geaghan (micgea)                                                    #
# Created: 2023/04/04                                                                 #
# =================================================================================== #

# ========== Mutect2 ========== #
## Copyright Broad Institute, 2017
##
## This WDL workflow runs GATK4 Mutect 2 on a single tumor-normal pair or on a single tumor sample,
## and performs additional filtering tasks.
##
## Main requirements/expectations :
## - One analysis-ready BAM file (and its index) for each sample
##
## Description of inputs:
##
## ** Runtime **
## gatk_docker: docker image to use for GATK 4 Mutect2
## preemptible: how many preemptions to tolerate before switching to a non-preemptible machine (on Google)
## max_retries: how many times to retry failed tasks -- very important on the cloud when there are transient errors
## gatk_override: (optional) local file or Google bucket path to a GATK 4 java jar file to be used instead of the GATK 4 jar
##                in the docker image.  This must be supplied when running in an environment that does not support docker
##                (e.g. SGE cluster on a Broad on-prem VM)
##
## ** Workflow options **
## intervals: genomic intervals (will be used for scatter)
## scatter_count: number of parallel jobs to generate when scattering over intervals
## m2_extra_args, m2_extra_filtering_args: additional arguments for Mutect2 calling and filtering (optional)
## split_intervals_extra_args: additional arguments for splitting intervals before scattering (optional)
## run_orientation_bias_mixture_model_filter: (optional) if true, filter orientation bias sites with the read orientation artifact mixture model.
##
## ** Primary inputs **
## ref_fasta, ref_fai, ref_dict: reference genome, index, and dictionary
## tumor_bam, tumor_bam_index: BAM and index for the tumor sample
## normal_bam, normal_bam_index: BAM and index for the normal sample
##
## ** Primary resources ** (optional but strongly recommended)
## pon, pon_idx: optional panel of normals (and its index) in VCF format containing probable technical artifacts (false positves)
## gnomad, gnomad_idx: optional database of known germline variants (and its index) (see http://gnomad.broadinstitute.org/downloads)
## variants_for_contamination, variants_for_contamination_idx: VCF of common variants (and its index)with allele frequencies for calculating contamination
##
## ** Secondary resources ** (for optional tasks)
## realignment_index_bundle: resource for FilterAlignmentArtifacts, which runs if and only if it is specified.  Generated by BwaMemIndexImageCreator.
##
## Outputs :
## - One VCF file and its index with primary filtering applied; a bamout.bam
##   file of reassembled reads if requested
##
## Cromwell version support
## - Successfully tested on v34
##
## LICENSING :
## This script is released under the WDL source code license (BSD-3) (see LICENSE in
## https://github.com/broadinstitute/wdl). Note however that the programs it calls may
## be subject to different licenses. Users are responsible for checking that they are
## authorized to run all programs before running this script. Please see the docker
## pages at https://hub.docker.com/r/broadinstitute/* for detailed licensing information
## pertaining to the included programs.

struct Runtime {
    String gatk_docker
    File? gatk_override
    Int max_retries
    Int preemptible
    Int cpu
    Int machine_mem
    Int command_mem
    Int disk
    Int boot_disk_size
}

workflow Mutect2SingleJob {
    input {
        # Mutect2 inputs
        File? intervals
        File ref_fasta
        File ref_fai
        File ref_dict
        File tumor_bam
        File tumor_bai
        File? normal_bam
        File? normal_bai
        File? pon
        File? pon_idx
        File? gnomad
        File? gnomad_idx
        String? m2_extra_args
        Boolean compress = true
        Boolean? make_bamout
        File? gga_vcf
        File? gga_vcf_idx
        File variants_for_contamination
        File variants_for_contamination_idx
        String? m2_extra_filtering_args
        
        # Runtime options
        String gatk_docker = "australia-southeast1-docker.pkg.dev/pb-dev-312200/somvar-images/gatk@sha256:0359ae4f32f2f541ca86a8cd30ef730bbaf8c306b9d53d2d520262d3e84b3b2b"  # :4.2.1.0
        File? gatk_override
        Int preemptible = 2
        Int max_retries = 2
        Int boot_disk_size = 12
        Int cpu = 4
        Int mem_mb = 5000
        Int disk_space = 100
        Int command_mem_padding = 1000

        # Use as a last resort to increase the disk given to every task in case of ill behaving data
        Int? emergency_extra_disk
    }

    String output_basename = basename(basename(tumor_bam, ".bam"),".cram")

    call M2UKB {
        input:
            intervals = intervals,
            ref_fasta = ref_fasta,
            ref_fai = ref_fai,
            ref_dict = ref_dict,
            tumor_bam = tumor_bam,
            tumor_bai = tumor_bai,
            normal_bam = normal_bam,
            normal_bai = normal_bai,
            output_name = output_basename,
            pon = pon,
            pon_idx = pon_idx,
            gnomad = gnomad,
            gnomad_idx = gnomad_idx,
            m2_extra_args = m2_extra_args,
            compress = compress,
            make_bamout = make_bamout,
            gga_vcf = gga_vcf,
            gga_vcf_idx = gga_vcf_idx,
            variants_for_contamination = variants_for_contamination,
            variants_for_contamination_idx = variants_for_contamination_idx,
            gatk_override = gatk_override,
            m2_extra_filtering_args = m2_extra_filtering_args,
            gatk_docker = gatk_docker,
            mem_mb = mem_mb,
            mem_pad = command_mem_padding,
            preemptible = preemptible,
            max_retries = max_retries,
            disk_space = disk_space,
            cpu = cpu
    }

    output {
        File filtered_vcf = M2UKB.filter_output_vcf
        File filtered_vcf_idx = M2UKB.filter_output_vcf_idx
        File filtering_stats = M2UKB.filtering_stats
        File mutect_stats = M2UKB.mutect_output_stats
        File? bamout = M2UKB.merged_bam_out
        File? bamout_index = M2UKB.merged_bam_out_index
        File read_orientation_model_params = M2UKB.artifact_prior_table
        File maf_segments = M2UKB.maf_segments
        File contamination_table = M2UKB.contamination_table
    }
}


task M2UKB {
    input {
        File? intervals
        File ref_fasta
        File ref_fai
        File ref_dict
        File tumor_bam
        File tumor_bai
        File? normal_bam
        File? normal_bai
        String output_name
        File? pon
        File? pon_idx
        File? gnomad
        File? gnomad_idx
        String? m2_extra_args
        Boolean compress
        Boolean? make_bamout
        File? gga_vcf
        File? gga_vcf_idx
        File variants_for_contamination
        File variants_for_contamination_idx
        File? gatk_override
        String? m2_extra_filtering_args
        # runtime
        String gatk_docker
        Int mem_mb = 5000
        Int mem_pad = 1000
        Int preemptible = 10
        Int max_retries = 0
        Int disk_space = 100
        Int cpu = 4
    }

    String unfiltered_name = output_name + "-unfiltered"
    String filtered_name = output_name + "-filtered"
    String unfiltered_vcf = unfiltered_name + if compress then ".vcf.gz" else ".vcf"
    String unfiltered_vcf_idx = unfiltered_vcf + if compress then ".tbi" else ".idx"
    String filtered_vcf = filtered_name + if compress then ".vcf.gz" else ".vcf"
    String filtered_vcf_idx = filtered_vcf + if compress then ".tbi" else ".idx"
    String output_bam_name = unfiltered_name + ".out.bam"
    String output_bam_param = if select_first([make_bamout, false]) then "--bam-output " + output_bam_name else ""


    String mutect_stats = unfiltered_vcf + ".stats"

    Int machine_mem = mem_mb
    Int cpu_mult = if cpu > 1 then cpu - 1 else 1
    Int command_mem = machine_mem - mem_pad

    # DNAnexus compatability: get the filename of all optional index files
    String normal_bai_def = if defined(normal_bai) then "defined" else "undefined"
    String pon_idx_def = if defined(pon_idx) then "defined" else "undefined"
    String gnomad_idx_def = if defined(gnomad_idx) then "defined" else "undefined"
    String gga_vcf_idx_def = if defined(gga_vcf_idx) then "defined" else "undefined"
    String variants_for_contamination_idx_def = if defined(variants_for_contamination_idx) then "defined" else "undefined"


    command <<<
        # ===== Mutect2 =====
        set -e

        export GATK_LOCAL_JAR=~{default="/gatk/gatk.jar" gatk_override}

        # We need to create these files regardless, even if they stay empty
        touch bamout.bam
        touch f1r2.tar.gz
        echo "" > normal_name.txt

        # DNAnexus compatability: echo optional index filenames to ensure they get localized
        OPT_VAR_DEFINED="~{normal_bai_def}"
        OPT_VAR_DEFINED="~{pon_idx_def}"
        OPT_VAR_DEFINED="~{gnomad_idx_def}"
        OPT_VAR_DEFINED="~{gga_vcf_idx_def}"
        OPT_VAR_DEFINED="~{variants_for_contamination_idx_def}"

        gatk --java-options "-Xmx~{command_mem}m -Xms~{command_mem - 1000}m" GetSampleName -R ~{ref_fasta} -I ~{tumor_bam} -O tumor_name.txt -encode
        tumor_command_line="-I ~{tumor_bam} -tumor `cat tumor_name.txt`"

        if [[ ! -z "~{normal_bam}" ]]; then
            gatk --java-options "-Xmx~{command_mem}m -Xms~{command_mem - 1000}m" GetSampleName -R ~{ref_fasta} -I ~{normal_bam} -O normal_name.txt -encode
            normal_command_line="-I ~{normal_bam} -normal `cat normal_name.txt`"
        fi

        gatk --java-options "-Xmx~{command_mem}m -Xms~{command_mem - 1000}m" Mutect2 \
            -R ~{ref_fasta} \
            $tumor_command_line \
            $normal_command_line \
            ~{"--germline-resource " + gnomad} \
            ~{"-pon " + pon} \
            ~{"-L " + intervals} \
            ~{"--alleles " + gga_vcf} \
            -O "~{unfiltered_vcf}" \
            --native-pair-hmm-threads ~{cpu} \
            ~{output_bam_param} \
            --f1r2-tar-gz f1r2.tar.gz \
            ~{m2_extra_args}

        # ===== GetPileupSummaries =====

        gatk --java-options "-Xmx~{command_mem}m -Xms~{command_mem - 1000}m" GetPileupSummaries -R ~{ref_fasta} -I ~{tumor_bam} ~{"--interval-set-rule INTERSECTION -L " + intervals} \
            -V ~{variants_for_contamination} -L ~{variants_for_contamination} -O tumor-pileups.table

        if [[ ! -z "~{normal_bam}" ]]; then
            gatk --java-options "-Xmx~{command_mem}m -Xms~{command_mem - 1000}m" GetPileupSummaries -R ~{ref_fasta} -I ~{normal_bam} ~{"--interval-set-rule INTERSECTION -L " + intervals} \
                -V ~{variants_for_contamination} -L ~{variants_for_contamination} -O normal-pileups.table
        fi

        # ===== Learn Read Orientation Model =====
        gatk --java-options "-Xmx~{command_mem}m -Xms~{command_mem - 1000}m" LearnReadOrientationModel \
            -I f1r2.tar.gz \
            -O "~{output_name}-artifact-priors.tar.gz"

        # ===== Calculate Contamination =====

        if [ -f normal-pileups.table ]
        then
            NORMPUOPTS="-matched normal-pileups.table"
        else
            NORMPUOPTS=""
        fi
        gatk --java-options "-Xmx~{command_mem}m -Xms~{command_mem - 1000}m" CalculateContamination -I tumor-pileups.table \
        -O "~{output_name}-contamination.table" --tumor-segmentation "~{output_name}-segments.table" $NORMPUOPTS

        # ===== Filter Mutect Calls =====

        gatk --java-options "-Xmx~{command_mem}m -Xms~{command_mem - 1000}m" FilterMutectCalls -V ~{unfiltered_vcf} \
            -R ~{ref_fasta} \
            -O ~{filtered_vcf} \
            --contamination-table "~{output_name}-contamination.table" \
            --tumor-segmentation "~{output_name}-segments.table" \
            --ob-priors "~{output_name}-artifact-priors.tar.gz" \
            -stats ~{mutect_stats} \
            --filtering-stats "~{output_name}.filtering.stats" \
            ~{m2_extra_filtering_args}
    >>>

    runtime {
        docker: gatk_docker
        bootDiskSizeGb: 12
        memory: machine_mem + " MB"
        disks: "local-disk " + disk_space + " HDD"
        preemptible: preemptible
        maxRetries: max_retries
        cpu: cpu
    }

    output {
        File filter_output_vcf = filtered_vcf
        File filter_output_vcf_idx = filtered_vcf_idx
        File filtering_stats = "~{output_name}.filtering.stats"
        File mutect_output_stats = mutect_stats
        File? merged_bam_out = "~{unfiltered_name}.out.bam"
        File? merged_bam_out_index = "~{unfiltered_name}.out.bai"
        File artifact_prior_table = output_name + "-artifact-priors.tar.gz"
        File maf_segments = output_name + "-segments.table"
        File contamination_table = output_name + "-contamination.table"
    }
}